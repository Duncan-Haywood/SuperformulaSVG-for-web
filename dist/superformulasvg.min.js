window.onload=function(){var o=document.getElementById("superformula-canvas");paper.setup(o),backgroundColor=new paper.Color(0,0,0,.05),invertedBackgroundColor=new paper.Color(0,0,0,.9),lineColor=new paper.Color(0,0,0,.6),invertedLineColor=new paper.Color(1,1,1,.6),gridColor=new paper.Color(0,0,0,.1),invertedGridColor=new paper.Color(1,1,1,.1),textColor=new paper.Color(0,0,0,.3),invertedTextColor=new paper.Color(1,1,1,.2),setupModal(),showChoices()};
function draw(){null!=paper.project&&paper.project.clear(),drawBackground(),mode==RANGE&&drawGridLines(),drawAllPaths(),alreadyScaled||(alreadyScaled=!0),parameters[mode].drawParams&&drawAllParamText()}function refresh(){alreadyScaled=!1,params=getNewParams(),superformulaPaths=getSuperformulaPaths()}function drawBackground(){var e=new paper.Path.Rectangle({point:[0,0],size:[innerWidth,window.innerHeight]});e.sendToBack(),void 0!==parameters[mode]&&void 0!==parameters[mode].invert&&(parameters[mode].invert?e.fillColor=invertedBackgroundColor:e.fillColor=backgroundColor)}function drawGridLines(){for(var e=1;e<parameters[mode].rows;e++){var r=paper.Path.Line(new paper.Point(0,e*(window.innerHeight/parameters[mode].rows)),new paper.Point(window.innerWidth,e*(window.innerHeight/parameters[mode].rows)));parameters[mode].invert?r.strokeColor=invertedGridColor:r.strokeColor=gridColor}for(e=1;e<parameters[mode].columns;e++){var a=paper.Path.Line(new paper.Point(e*(window.innerWidth/parameters[mode].columns),0),new paper.Point(e*(window.innerWidth/parameters[mode].columns),window.innerHeight));parameters[mode].invert?a.strokeColor=invertedGridColor:a.strokeColor=gridColor}}function drawAllPaths(){var e,r,a;if(mode==TUNING?(e=window.innerWidth,r=window.innerHeight):mode==RANGE&&(e=window.innerWidth/parameters[RANGE].columns,r=window.innerHeight/parameters[RANGE].rows),a=e<r?e:r,mode==TUNING)drawPaths(superformulaPaths,window.innerWidth/2,window.innerHeight/2,a);else if(mode==RANGE)for(var o=0,n=0;n<parameters[RANGE].columns;n++)for(var t=0;t<parameters[RANGE].rows;t++)drawPaths(superformulaPaths[o],n*(window.innerWidth/parameters[RANGE].columns)+e/2,t*(window.innerHeight/parameters[RANGE].rows)+r/2,a),o++}function drawPaths(e,r,a,o){largestRadius=0;for(var n=0;n<e.length;n++)for(var t=0;t<e[n].segments.length;t++){var i=e[n].segments[t].point,d=Math.sqrt(i.x*i.x+i.y*i.y);d>largestRadius&&(largestRadius=d)}group=new paper.Group(e),group.position.x=r,group.position.y=a,parameters[mode].invert?group.strokeColor=invertedLineColor:group.strokeColor=lineColor,alreadyScaled||(scaleFactor=.9*o/(2*largestRadius),group.scale(scaleFactor))}function drawAllParamText(){if(mode==TUNING)drawParamText(params,20,70);else if(mode==RANGE)for(var e=0,r=0;r<parameters[RANGE].columns;r++)for(var a=0;a<parameters[RANGE].rows;a++)drawParamText(params[e],r*(window.innerWidth/parameters[RANGE].columns)+10,a*(window.innerHeight/parameters[RANGE].rows)+20),e++}function drawParamText(e,r,a){var o=[];for(var n in o.a=new paper.PointText(r,a),o.a.content="a: "+e.a.toFixed(2),o.b=new paper.PointText(new paper.Point(r,a+15)),o.b.content="b: "+e.b.toFixed(2),o.m=new paper.PointText(new paper.Point(r,a+30)),parameters[mode].closePaths?o.m.content="m: "+e.m:o.m.content="m: "+e.m.toFixed(2),o.n1=new paper.PointText(new paper.Point(r,a+45)),o.n1.content="n1: "+e.n1.toFixed(2),o.n2=new paper.PointText(new paper.Point(r,a+60)),o.n2.content="n2: "+e.n2.toFixed(2),o.n3=new paper.PointText(new paper.Point(r,a+75)),o.n3.content="n3: "+e.n3.toFixed(2),o.iterations=new paper.PointText(new paper.Point(r,a+90)),o.iterations.content="iterations: "+e.iterations,o.decay=new paper.PointText(new paper.Point(r,a+105)),o.decay.content="decay: "+e.decay.toFixed(2),o)parameters[mode].invert?o[n].fillColor=invertedTextColor:o[n].fillColor=textColor;return new paper.Group(o)}
var mode,gui,aSlider,bSlider,mSlider,n1Slider,n2Slider,n3Slider,iterationsSlider,decaySlider,aMinSlider,bMinSlider,mMinSlider,n1MinSlider,n2MinSlider,n3MinSlider,iterationsMinSlider,decayMinSlider,aMaxSlider,bMaxSlider,mMaxSlider,n1MaxSlider,n2MaxSlider,n3MaxSlider,iterationsMaxSlider,decayMaxSlider,invertButton,closePathsButton,drawParamstButton,backgroundColor,invertedBackgroundColor,gridColor,invertedGridColor,lineColor,invertedLineColor,textColor,invertedTextColor,choiceContainer,tuneBlock,rangeBlock,helpLink,backLink,iconLinks,modal,modalContent,superformulaPaths,params,TUNING=0,RANGE=1,paramLimits={a:{min:1,max:20},b:{min:1,max:20},m:{min:1,max:20},n1:{min:2,max:80},n2:{min:4,max:80},n3:{min:4,max:80},iterations:{min:1,max:20},decay:{min:.05,max:.2}},parameters=[{a:parseFloat(random(paramLimits.a.min,paramLimits.a.max)),b:parseFloat(random(paramLimits.b.min,paramLimits.b.max)),m:3,n1:parseFloat(random(paramLimits.n1.min,paramLimits.n1.max)),n2:parseFloat(random(paramLimits.n2.min,paramLimits.n2.max)),n3:parseFloat(random(paramLimits.n3.min,paramLimits.n3.max)),iterations:parseInt(random(paramLimits.iterations.min,paramLimits.iterations.max)),decay:parseFloat(random(paramLimits.decay.min,paramLimits.decay.max)),drawParams:!0,invert:!1,closePaths:!0},{a:{min:paramLimits.a.min,max:paramLimits.a.max},b:{min:paramLimits.b.min,max:paramLimits.b.max},m:{min:paramLimits.m.min,max:paramLimits.m.max},n1:{min:paramLimits.n1.min,max:paramLimits.n1.max},n2:{min:paramLimits.n2.min,max:paramLimits.n2.max},n3:{min:paramLimits.n3.min,max:paramLimits.n3.max},iterations:{min:paramLimits.iterations.min,max:paramLimits.iterations.max},decay:{min:paramLimits.decay.min,max:paramLimits.decay.max},drawParams:!0,invert:!1,closePaths:!0,rows:2,columns:3}],controlFunctions={randomize:function(){randomize()},generate:function(){generate()},svg:function(){exportSVG()},image:function(){exportImage()}},choicesSetup=!1,alreadyScaled=!1;
function setupModal(){modal=document.querySelector(".modal"),modalContent=document.querySelector(".modal .modal-content"),document.querySelector(".help-icon-link").addEventListener("click",showModal),document.querySelector(".help-link").addEventListener("click",showModal)}function showModal(){modal.className=modal.className.replace(/\hide\b/g,"").trim(),modal.className=modal.className.replace(/\animated fadeOut\b/g,"").trim(),modal.className+=" animated fadeIn",modal.addEventListener("click",hideModal),modalContent.className+=" animated fadeInDownBig",modalContent.className=modalContent.className.replace(/\animated fadeOutUpBig\b/g,"").trim()}function hideModal(){modal.className=modal.className.replace(/\animated fadeIn\b/g,"").trim(),modal.className+=" animated fadeOut",modal.removeEventListener("click",hideModal),setTimeout(function(){modal.className+=" hide"},1e3),modalContent.className=modalContent.className.replace(/\animated fadeInDownBig\b/g,"").trim(),modalContent.className+=" animated fadeOutUpBig"}
document.addEventListener("keyup",function(e){switch(e.key){case" ":mode==RANGE&&generate();break;case"s":exportSVG();break;case"i":parameters[mode].invert=!parameters[mode].invert,invertColors();break;case"p":exportImage();break;case"r":randomize(),generate()}});
function getNewParams(){var a;if(mode==TUNING)(a={}).a=parameters[TUNING].a,a.b=parameters[TUNING].b,a.m=parameters[TUNING].m,parameters[TUNING].closePaths&&a.m%2!=0&&(a.m+1>=paramLimits.m.max?a.m--:a.m++),a.n1=parameters[TUNING].n1,a.n2=parameters[TUNING].n2,a.n3=parameters[TUNING].n3,a.iterations=parameters[TUNING].iterations,a.decay=parameters[TUNING].decay;else if(mode==RANGE){var r;a=[];for(var e=0;e<parameters[RANGE].rows;e++)for(var m=0;m<parameters[RANGE].columns;m++)(r={}).a=Number(parseFloat(random(parameters[RANGE].a.min,parameters[RANGE].a.max)).toFixed(2)),r.b=Number(parseFloat(random(parameters[RANGE].b.min,parameters[RANGE].b.max)).toFixed(2)),parameters[RANGE].closePaths?(r.m=parseInt(random(parameters[RANGE].m.min,parameters[RANGE].m.max)),r.m%2!=0&&(r.m+1>=paramLimits.m.max?r.m--:r.m++)):r.m=Number(parseFloat(random(parameters[RANGE].m.min,parameters[RANGE].m.max)).toFixed(2)),r.n1=Number(parseFloat(random(parameters[RANGE].n1.min,parameters[RANGE].n1.max)).toFixed(2)),r.n2=Number(parseFloat(random(parameters[RANGE].n2.min,parameters[RANGE].n2.max)).toFixed(2)),r.n3=Number(parseFloat(random(parameters[RANGE].n3.min,parameters[RANGE].n3.max)).toFixed(2)),r.iterations=parseInt(random(parameters[RANGE].iterations.min,parameters[RANGE].iterations.max)),r.decay=Number(parseFloat(random(parameters[RANGE].decay.min,parameters[RANGE].decay.max)).toFixed(2)),a.push(r)}return a}function getSuperformulaPaths(){var a=[];if(mode==TUNING)for(k=params.iterations;k>0;k--)a.push(getSuperformulaPath(params.a-k*params.decay,params.b-k*params.decay,params.m,params.n1-k*params.decay,params.n2-k*params.decay,params.n3-k*params.decay));else if(mode==RANGE)for(var r,e=0;e<parameters[RANGE].rows*parameters[RANGE].columns;e++){for(r=[],k=params[e].iterations;k>0;k--)r.push(getSuperformulaPath(params[e].a-k*params[e].decay,params[e].b-k*params[e].decay,params[e].m,params[e].n1-k*params[e].decay,params[e].n2-k*params[e].decay,params[e].n3-k*params[e].decay));a.push(r)}return a}function getSuperformulaPath(a,r,e,m,t,s){var p=2*Math.PI/720,o=new paper.Path;parameters[mode].invert?o.strokeColor=invertedLineColor:o.strokeColor=lineColor;for(var n=0;n<=720;n++)o.add(getSuperformulaPoint(p*n,a,r,e,m,t,s));return o}function getSuperformulaPoint(a,r,e,m,t,s,p){var o,n,N,i={};return n=Math.cos(m*a/4)/r,n=Math.abs(n),n=Math.pow(n,s),N=Math.sin(m*a/4)/e,N=Math.abs(N),N=Math.pow(N,p),o=Math.pow(n+N,1/t),0==Math.abs(o)?(i.x=0,i.y=0):(o=1/o,i.x=o*Math.cos(a),i.y=o*Math.sin(a)),i}
function setupChoices(){choiceContainer=document.querySelector(".container"),choiceContent=document.querySelectorAll(".container .row"),tuneBlock=document.querySelector(".tune-block"),rangeBlock=document.querySelector(".range-block"),backLink=document.querySelector(".back-link"),backLink.addEventListener("click",reloadApp),tuneBlock.addEventListener("click",function(){launchApp(TUNING)}),rangeBlock.addEventListener("click",function(){launchApp(RANGE)}),choicesSetup=!0}function showChoices(){choicesSetup||setupChoices(),choiceContainer.className=choiceContainer.className.replace(/\hide\b/g,"").trim();for(var a=0;a<choiceContent.length;a++)choiceContent[a].className+=" animated fadeIn"}function hideChoices(){choiceContainer.className+=" hide";for(var a=0;a<choiceContent.length;a++)choiceContent[a].className=choiceContent[a].className.replace(/\animated fadeIn\b/g,"").trim()}function launchApp(a){setMode(a),hideChoices(),showIconLinks(),setupGUI(),generate()}function reloadApp(){null!=paper&&null!=paper.project&&paper.project.clear(),hideIconLinks(),gui.destroy(),showChoices()}function showIconLinks(){"undefined"==typeof iconLinks&&(iconLinks=document.querySelectorAll(".icon-link"));for(var a=0;a<iconLinks.length;a++)iconLinks[a].className=iconLinks[a].className.replace(/\hide\b/g,"").trim()}function hideIconLinks(){"undefined"==typeof iconLinks&&(iconLinks=document.querySelectorAll(".icon-link"));for(var a=0;a<iconLinks.length;a++)iconLinks[a].className+=" hide"}function setMode(a){mode=a}function setupGUI(){if(gui=new dat.GUI,gui.width=350,mode==TUNING)aSlider=gui.add(parameters[TUNING],"a",paramLimits.a.min,paramLimits.a.max).onChange(generate),bSlider=gui.add(parameters[TUNING],"b",paramLimits.b.min,paramLimits.b.max).onChange(generate),mSlider=gui.add(parameters[TUNING],"m",paramLimits.m.min,paramLimits.m.max,2).onChange(generate),parameters[TUNING].closePaths&&mSlider.step(2),n1Slider=gui.add(parameters[TUNING],"n1",paramLimits.n1.min,paramLimits.n1.max).onChange(generate),n2Slider=gui.add(parameters[TUNING],"n2",paramLimits.n2.min,paramLimits.n2.max).onChange(generate),n3Slider=gui.add(parameters[TUNING],"n3",paramLimits.n3.min,paramLimits.n3.max).onChange(generate),iterationsSlider=gui.add(parameters[TUNING],"iterations",paramLimits.iterations.min,paramLimits.iterations.max,1).onChange(generate),decaySlider=gui.add(parameters[TUNING],"decay",paramLimits.decay.min,paramLimits.decay.max).onChange(generate),drawParamstButton=gui.add(parameters[TUNING],"drawParams",!0).name("Draw parameters").onChange(draw),invertButton=gui.add(parameters[TUNING],"invert",!1).name("Invert colors").onChange(invertColors),closePathsButton=gui.add(parameters[TUNING],"closePaths",!1).name("Only allow closed paths").onChange(closePaths),gui.add(controlFunctions,"randomize").name("Randomize"),gui.add(controlFunctions,"svg").name("Export SVG"),gui.add(controlFunctions,"image").name("Export image");else if(mode==RANGE){var a=gui.addFolder("a"),e=gui.addFolder("b"),i=gui.addFolder("m"),m=gui.addFolder("n1"),r=gui.addFolder("n2"),n=gui.addFolder("n3"),t=gui.addFolder("iterations"),s=gui.addFolder("decay");aMinSlider=a.add(parameters[RANGE].a,"min",paramLimits.a.min,paramLimits.a.max),aMaxSlider=a.add(parameters[RANGE].a,"max",paramLimits.a.min,paramLimits.a.max),bMinSlider=e.add(parameters[RANGE].b,"min",paramLimits.b.min,paramLimits.b.max),bMaxSlider=e.add(parameters[RANGE].b,"max",paramLimits.b.min,paramLimits.b.max),mMinSlider=i.add(parameters[RANGE].m,"min",paramLimits.m.min,paramLimits.m.max),mMaxSlider=i.add(parameters[RANGE].m,"max",paramLimits.m.min,paramLimits.m.max),parameters[RANGE].closePaths&&(mMinSlider.step(2),mMaxSlider.step(2)),n1MinSlider=m.add(parameters[RANGE].n1,"min",paramLimits.n1.min,paramLimits.n1.max),n1MaxSlider=m.add(parameters[RANGE].n1,"max",paramLimits.n1.min,paramLimits.n1.max),n2MinSlider=r.add(parameters[RANGE].n2,"min",paramLimits.n2.min,paramLimits.n2.max),n2MaxSlider=r.add(parameters[RANGE].n2,"max",paramLimits.n2.min,paramLimits.n2.max),n3MinSlider=n.add(parameters[RANGE].n3,"min",paramLimits.n3.min,paramLimits.n3.max),n3MaxSlider=n.add(parameters[RANGE].n3,"max",paramLimits.n3.min,paramLimits.n3.max),iterationsMinSlider=t.add(parameters[RANGE].iterations,"min",paramLimits.iterations.min,paramLimits.iterations.max).step(1),iterationsMaxSlider=t.add(parameters[RANGE].iterations,"max",paramLimits.iterations.min,paramLimits.iterations.max).step(1),decayMinSlider=s.add(parameters[RANGE].decay,"min",paramLimits.decay.min,paramLimits.decay.max),decayMaxSlider=s.add(parameters[RANGE].decay,"max",paramLimits.decay.min,paramLimits.decay.max),drawParamstButton=gui.add(parameters[RANGE],"drawParams",!0).name("Draw parameters").onChange(draw),invertButton=gui.add(parameters[RANGE],"invert",!1).name("Invert colors").onChange(invertColors),closePathsButton=gui.add(parameters[RANGE],"closePaths",!1).name("Only allow closed paths").onChange(closePaths),gui.add(parameters[RANGE],"rows",1,5).name("Rows").step(1),gui.add(parameters[RANGE],"columns",1,8).name("Columns").step(1),gui.add(controlFunctions,"randomize").name("Randomize"),gui.add(controlFunctions,"generate").name("Generate new forms"),gui.add(controlFunctions,"svg").name("Export SVG"),gui.add(controlFunctions,"image").name("Export image")}}function randomize(){mode==TUNING?(aSlider.setValue(parseFloat(random(paramLimits.a.min,paramLimits.a.max))),bSlider.setValue(parseFloat(random(paramLimits.b.min,paramLimits.b.max))),mSlider.setValue(parseFloat(random(paramLimits.m.min,paramLimits.m.max))),n1Slider.setValue(parseFloat(random(paramLimits.n1.min,paramLimits.n1.max))),n2Slider.setValue(parseFloat(random(paramLimits.n2.min,paramLimits.n2.max))),n3Slider.setValue(parseFloat(random(paramLimits.n3.min,paramLimits.n3.max))),iterationsSlider.setValue(parseInt(random(paramLimits.iterations.min,paramLimits.iterations.max))),decaySlider.setValue(parseFloat(random(paramLimits.decay.min,paramLimits.decay.max)))):mode==RANGE&&(aMinSlider.setValue(parseFloat(random(paramLimits.a.min,paramLimits.a.max))),aMaxSlider.setValue(parseFloat(random(aMinSlider.getValue(),paramLimits.a.max))),bMinSlider.setValue(parseFloat(random(paramLimits.b.min,paramLimits.b.max))),bMaxSlider.setValue(parseFloat(random(bMinSlider.getValue(),paramLimits.b.max))),mMinSlider.setValue(parseFloat(random(paramLimits.m.min,paramLimits.m.max))),mMaxSlider.setValue(parseFloat(random(mMinSlider.getValue(),paramLimits.m.max))),n1MinSlider.setValue(parseFloat(random(paramLimits.n1.min,paramLimits.n1.max))),n1MaxSlider.setValue(parseFloat(random(n1MinSlider.getValue(),paramLimits.n1.max))),n2MinSlider.setValue(parseFloat(random(paramLimits.n2.min,paramLimits.n2.max))),n2MaxSlider.setValue(parseFloat(random(n2MinSlider.getValue(),paramLimits.n2.max))),n3MinSlider.setValue(parseFloat(random(paramLimits.n3.min,paramLimits.n3.max))),n3MaxSlider.setValue(parseFloat(random(n3MinSlider.getValue(),paramLimits.n3.max))),iterationsMinSlider.setValue(parseInt(random(paramLimits.iterations.min,paramLimits.iterations.max))),iterationsMaxSlider.setValue(parseInt(random(iterationsMinSlider.getValue(),paramLimits.iterations.max))),decayMinSlider.setValue(parseFloat(random(paramLimits.decay.min,paramLimits.decay.max))),decayMaxSlider.setValue(parseFloat(random(decayMinSlider.getValue(),paramLimits.decay.max))))}function generate(){refresh(),draw()}function exportSVG(){var a=paper.project.exportSVG({asString:!0}),e=new Blob([a],{type:"image/svg+xml;charset=utf-8"});saveAs(e,"superformula.svg")}function exportImage(){paper.view.element.toBlob(function(a){saveAs(a,"superformula.png")})}function invertColors(){if(parameters[mode].invert){backLink.className+=" inverted";for(var a=0;a<iconLinks.length;a++)iconLinks[a].className+=" inverted"}else{backLink.className=backLink.className.replace(/\inverted\b/g,"").trim();for(a=0;a<iconLinks.length;a++)iconLinks[a].className=iconLinks[a].className.replace(/\inverted\b/g,"").trim()}draw()}function closePaths(){var a,e;if(parameters[mode].closePaths?(a=2,e=2):(a=.01,e=(paramLimits.m.max-a)/100),paramLimits.m.min=a,mode==TUNING){mSlider.min(paramLimits.m.min),mSlider.step(e);var i=mSlider.getValue();mSlider.setValue(2*Math.round(i/2))}else if(mode==RANGE&&(mMinSlider.min(paramLimits.m.min),mMaxSlider.min(paramLimits.m.min),mMinSlider.step(e),mMaxSlider.step(e),parameters[mode].closePaths)){var m=mMinSlider.getValue(),r=mMaxSlider.getValue();mMinSlider.setValue(2*Math.round(m/2)),mMaxSlider.setValue(2*Math.round(r/2))}}
function random(n,r){return Math.random()*(r-n)+n}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
